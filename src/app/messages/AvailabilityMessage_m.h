//
// Generated file, do not edit! Created by opp_msgtool 6.0 from app/messages/AvailabilityMessage.msg.
//

#ifndef __TASK_OFFLOADING_AVAILABILITYMESSAGE_M_H
#define __TASK_OFFLOADING_AVAILABILITYMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace task_offloading {

class AvailabilityMessage;

}  // namespace task_offloading

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace task_offloading {

/**
 * Class generated from <tt>app/messages/AvailabilityMessage.msg:21</tt> by opp_msgtool.
 * <pre>
 * packet AvailabilityMessage extends veins::BaseFrame1609_4
 * {
 *     int hostID;
 *     string index;
 *     double availableLoad;
 *     double cpuFreq;
 *     veins::LAddress::L2Type senderAddress = -1;
 *     double vehicleAngle;
 *     double vehicleSpeed;
 *     double vehiclePositionX;
 *     double vehiclePositionY;
 * }
 * </pre>
 */
class AvailabilityMessage : public ::veins::BaseFrame1609_4
{
  protected:
    int hostID = 0;
    ::omnetpp::opp_string index;
    double availableLoad = 0;
    double cpuFreq = 0;
    ::veins::LAddress::L2Type senderAddress = -1;
    double vehicleAngle = 0;
    double vehicleSpeed = 0;
    double vehiclePositionX = 0;
    double vehiclePositionY = 0;

  private:
    void copy(const AvailabilityMessage& other);

  protected:
    bool operator==(const AvailabilityMessage&) = delete;

  public:
    AvailabilityMessage(const char *name=nullptr, short kind=0);
    AvailabilityMessage(const AvailabilityMessage& other);
    virtual ~AvailabilityMessage();
    AvailabilityMessage& operator=(const AvailabilityMessage& other);
    virtual AvailabilityMessage *dup() const override {return new AvailabilityMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getHostID() const;
    virtual void setHostID(int hostID);

    virtual const char * getIndex() const;
    virtual void setIndex(const char * index);

    virtual double getAvailableLoad() const;
    virtual void setAvailableLoad(double availableLoad);

    virtual double getCpuFreq() const;
    virtual void setCpuFreq(double cpuFreq);

    virtual const ::veins::LAddress::L2Type& getSenderAddress() const;
    virtual ::veins::LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<::veins::LAddress::L2Type&>(const_cast<AvailabilityMessage*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const ::veins::LAddress::L2Type& senderAddress);

    virtual double getVehicleAngle() const;
    virtual void setVehicleAngle(double vehicleAngle);

    virtual double getVehicleSpeed() const;
    virtual void setVehicleSpeed(double vehicleSpeed);

    virtual double getVehiclePositionX() const;
    virtual void setVehiclePositionX(double vehiclePositionX);

    virtual double getVehiclePositionY() const;
    virtual void setVehiclePositionY(double vehiclePositionY);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AvailabilityMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AvailabilityMessage& obj) {obj.parsimUnpack(b);}


}  // namespace task_offloading


namespace omnetpp {

template<> inline task_offloading::AvailabilityMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<task_offloading::AvailabilityMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TASK_OFFLOADING_AVAILABILITYMESSAGE_M_H

