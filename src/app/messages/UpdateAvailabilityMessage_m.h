//
// Generated file, do not edit! Created by opp_msgtool 6.0 from app/messages/UpdateAvailabilityMessage.msg.
//

#ifndef __TASK_OFFLOADING_UPDATEAVAILABILITYMESSAGE_M_H
#define __TASK_OFFLOADING_UPDATEAVAILABILITYMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace task_offloading {

class UpdateAvailabilityMessage;

}  // namespace task_offloading

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace task_offloading {

/**
 * Class generated from <tt>app/messages/UpdateAvailabilityMessage.msg:22</tt> by opp_msgtool.
 * <pre>
 * packet UpdateAvailabilityMessage extends veins::BaseFrame1609_4
 * {
 *     string availability;
 * }
 * </pre>
 */
class UpdateAvailabilityMessage : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::opp_string availability;

  private:
    void copy(const UpdateAvailabilityMessage& other);

  protected:
    bool operator==(const UpdateAvailabilityMessage&) = delete;

  public:
    UpdateAvailabilityMessage(const char *name=nullptr, short kind=0);
    UpdateAvailabilityMessage(const UpdateAvailabilityMessage& other);
    virtual ~UpdateAvailabilityMessage();
    UpdateAvailabilityMessage& operator=(const UpdateAvailabilityMessage& other);
    virtual UpdateAvailabilityMessage *dup() const override {return new UpdateAvailabilityMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAvailability() const;
    virtual void setAvailability(const char * availability);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UpdateAvailabilityMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UpdateAvailabilityMessage& obj) {obj.parsimUnpack(b);}


}  // namespace task_offloading


namespace omnetpp {

template<> inline task_offloading::UpdateAvailabilityMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<task_offloading::UpdateAvailabilityMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TASK_OFFLOADING_UPDATEAVAILABILITYMESSAGE_M_H

