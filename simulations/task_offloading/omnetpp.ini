[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 1s
**.cmdenv-log-level = info
**.result-recording-modes = all
seed-set = 2

image-path = ../../images

network = task_offloading

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

**.scalar-recording = true
**.vector-recording = true

*.playgroundSizeX = 3500m
*.playgroundSizeY = 3500m
*.playgroundSizeZ = 50m


##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = true

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.obstacles = xmldoc("config.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.1s
*.manager.host = "localhost"
*.manager.port = 9999
*.manager.autoShutdown = true
*.manager.launchConfig = xmldoc("task_offloading.launchd.xml")

##########################################################
#                       RSU SETTINGS                     #
#                                                        #
#                                                        #
##########################################################
# *.rsu[0].mobility.x = 2000
# *.rsu[0].mobility.y = 2000
# *.rsu[0].mobility.z = 3
#
# *.rsu[*].applType = "RSU"
# *.rsu[*].appl.headerLength = 80 bit
# *.rsu[*].appl.sendBeacons = false
# *.rsu[*].appl.dataOnSch = false
# *.rsu[*].appl.beaconInterval = 1s
# *.rsu[*].appl.beaconUserPriority = 7
# *.rsu[*].appl.dataUserPriority = 5
# *.rsu[*].nic.phy80211p.antennaOffsetZ = 0 m

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 20mW
*.**.nic.mac1609_4.bitrate = 6Mbps
*.**.nic.phy80211p.minPowerLevel = -110dBm

*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -98dBm

*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

*.**.nic.phy80211p.antenna = xmldoc("antenna.xml", "/root/Antenna[@id='monopole']")
*.**[*].nic.phy80211p.antennaOffsetY = 0 m
*.**[*].nic.phy80211p.antennaOffsetZ = 1.895 m

# Specify if the app have to use auto ACKs between the messages
# MAC layer
*.**.nic.mac1609_4.useAcks = ${useAcks = false}
# Application layer
*.veinsApp.useAcks = ${$useAcks}

##########################################################
#                      App Layer                         #
##########################################################
# Match the car and bus modules with the XML .rou file
*.manager.moduleDisplayString = "BEACONER='i=veins/node/car_vs' BUS='i=veins/node/car_vs' CAR='i=veins/node/car_vs'"
*.manager.moduleType = "BEACONER=org.car2x.veins.nodes.Car BUS=org.car2x.veins.nodes.Car CAR=org.car2x.veins.nodes.Car "
*.manager.moduleName = "BEACONER=beaconer BUS=bus CAR=car"

# Select the application types for the car and the bus
*.beaconer[*].applType = "Beaconer"
*.bus[*].applType = "TaskGenerator"
*.car[*].applType = "Worker"

# Common settings shared between cars and buses
*.**[*].appl.headerLength = 80 bit
*.**[*].appl.dataOnSch = false

##########################################################
#                      Mobility                          #
##########################################################
*.**[*].veinsmobility.x = 0
*.**[*].veinsmobility.y = 0
*.**[*].veinsmobility.z = 0
*.**[*].veinsmobility.setHostSpeed = false

##########################################################
#               Task offloading parameters               #
#                  -- Task generator --                  #
##########################################################
*.bus[*].appl.sendBeacons = false

*.bus[*].appl.beaconInterval = 1s

# Time to wait in s for the help request to be sent
*.bus[*].appl.randomTimeFirstHelpMessage = uniform(30s, 40s)

*.bus[*].appl.randomTimeHelpRequest = uniform(1s, 2s)

# Time in ms for the bus to wait for ok messages
*.bus[*].appl.busWaitingTimeForAvailability = uniform(100ms, 200ms)

# Time in s for data computation extra time
*.bus[*].appl.dataComputationThreshold = uniform(500ms, 600ms)

# Total computation load for the bus
*.bus[*].appl.computationLoad = 10MB


# Bus load capacity
*.bus[*].appl.busVehicleLoad = 4MB

# The minimum vehicle load accepted by the bus
*.bus[*].appl.minimumVehicleLoadRequested = 700kB

# Select sorting algorithm for load balancing
# Types available: FIFO, ComputationTime
*.loadBalancingAlgorithm.typename = "ComputationTime"

# Check if car position in the next aRt seconds is in the new bus range
*.bus[*].appl.availabilityRangeTime = -1

##########################################################
#               Task offloading parameters               #
#                      -- Worker --                      #
##########################################################
*.car[*].appl.sendBeacons = false

*.car[*].appl.beaconInterval = 1s
# These parameters sets the probability of a vehicle to remain available
# after them computation (Piggybacking)
*.car[*].appl.stillAvailableProbability = uniform(0, 1)
*.car[*].appl.stillAvailableThreshold = 0.5

# The common load of all vehicles except for bus
*.car[*].appl.commonVehicleLoad = 1MB

# Time in ms for the ok messages
*.car[*].appl.vehicleAvailabilityMessageTime = uniform(0ms, 100ms)

# Time in s for ack message extra time
*.car[*].appl.ackMessageThreshold = uniform(300ms, 400ms)

# These parameters are for the current load of a vehicle and the 
# respective CPU frequency
*.car[*].appl.randomVehicleFreeLoadPercentage = uniform(0, 1)
*.car[*].appl.randomVehicleCpuFreq = uniform(1.20GHz, 2.70GHz)

##########################################################
#               Task offloading parameters               #
#                     -- Beaconer --                     #
##########################################################
*.beaconer[*].appl.sendBeacons = true
# Size of beacon message
*.beaconer[*].appl.beaconByteLength = 100byte
# Interval between each beacon is sent from the same vehicle
*.beaconer[*].appl.beaconIntervalTime = uniform(100ms, 200ms)
# Warm-up time to wait so that all vehicles can spawn before sending beacons
*.beaconer[*].appl.randomWarmupTime = uniform(30s, 40s)

##########################################################
#               Task offloading parameters               #
#         -- Shared (Worker-Task Generator) --           #
##########################################################
*.**[*].appl.IOratio = 1
*.**[*].appl.retryFactorTime = 1
[Config Default]

[Config WithBeaconing]
# *.rsu[*].appl.sendBeacons = true
*.**[*].appl.sendBeacons = true

[Config WithChannelSwitching]
*.**.nic.mac1609_4.useServiceChannel = true
*.**[*].appl.dataOnSch = true
# *.rsu[*].appl.dataOnSch = true

